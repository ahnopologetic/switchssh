name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write
  actions: read
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            binary_name: switchssh-linux-amd64
          - os: linux
            arch: arm64
            binary_name: switchssh-linux-arm64
          - os: darwin
            arch: amd64
            binary_name: switchssh-darwin-amd64
          - os: darwin
            arch: arm64
            binary_name: switchssh-darwin-arm64
          - os: windows
            arch: amd64
            binary_name: switchssh-windows-amd64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.25"

      - name: Build binary
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 0
        run: |
          go build -ldflags="-s -w" -o ${{ matrix.binary_name }} main.go

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.binary_name }}
          path: ${{ matrix.binary_name }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Linux AMD64
        uses: actions/download-artifact@v4
        with:
          name: switchssh-linux-amd64
          path: .

      - name: Download Linux ARM64
        uses: actions/download-artifact@v4
        with:
          name: switchssh-linux-arm64
          path: .

      - name: Download Darwin AMD64
        uses: actions/download-artifact@v4
        with:
          name: switchssh-darwin-amd64
          path: .

      - name: Download Darwin ARM64
        uses: actions/download-artifact@v4
        with:
          name: switchssh-darwin-arm64
          path: .

      - name: Download Windows AMD64
        uses: actions/download-artifact@v4
        with:
          name: switchssh-windows-amd64.exe
          path: .

      - name: List downloaded files
        run: |
          echo "Checking for downloaded binaries..."
          ls -la switchssh-* || echo "No switchssh binaries found"
          echo "Current directory contents:"
          ls -la

      - name: Get Release
        id: get_release
        run: |
          # Extract tag name from github.ref (remove 'refs/tags/' prefix)
          TAG_NAME=${GITHUB_REF#refs/tags/}

          # Get the release ID for the tag
          RELEASE_ID=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG_NAME" \
            | jq -r '.id')

          if [ "$RELEASE_ID" = "null" ] || [ -z "$RELEASE_ID" ]; then
            echo "Error: No release found for tag $TAG_NAME"
            echo "Please create a release manually for this tag first"
            exit 1
          fi

          echo "release_id=$RELEASE_ID" >> $GITHUB_OUTPUT
          echo "Found existing release with ID: $RELEASE_ID"

      - name: Upload Release Assets
        run: |
          # Extract tag name from github.ref (remove 'refs/tags/' prefix)
          TAG_NAME=${GITHUB_REF#refs/tags/}

          echo "Starting upload process..."
          echo "Release ID: ${{ steps.get_release.outputs.release_id }}"

          # Upload each binary to the existing release
          for binary in switchssh-linux-amd64 switchssh-linux-arm64 switchssh-darwin-amd64 switchssh-darwin-arm64 switchssh-windows-amd64.exe; do
            if [ -f "$binary" ]; then
              echo "Uploading $binary (size: $(stat -c%s "$binary" 2>/dev/null || stat -f%z "$binary" 2>/dev/null || echo "unknown") bytes)..."
              response=$(curl -s -w "%{http_code}" \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                -H "Content-Type: application/octet-stream" \
                --data-binary "@$binary" \
                "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.get_release.outputs.release_id }}/assets?name=$binary")
              
              http_code="${response: -3}"
              response_body="${response%???}"
              
              if [ "$http_code" = "201" ]; then
                echo "✅ Uploaded $binary successfully"
              else
                echo "❌ Failed to upload $binary (HTTP $http_code): $response_body"
              fi
            else
              echo "⚠️  Warning: $binary not found, skipping upload"
            fi
          done
